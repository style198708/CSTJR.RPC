/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace CSTJR.RPC.Message.Contracts
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class JpushMessageParam : TBase
  {
    private int _Category;
    private string _FromUser;
    private string _ToUser;
    private List<string> _ActionList;
    private List<string> _MessageList;

    public int Category
    {
      get
      {
        return _Category;
      }
      set
      {
        __isset.Category = true;
        this._Category = value;
      }
    }

    public string FromUser
    {
      get
      {
        return _FromUser;
      }
      set
      {
        __isset.FromUser = true;
        this._FromUser = value;
      }
    }

    public string ToUser
    {
      get
      {
        return _ToUser;
      }
      set
      {
        __isset.ToUser = true;
        this._ToUser = value;
      }
    }

    public List<string> ActionList
    {
      get
      {
        return _ActionList;
      }
      set
      {
        __isset.ActionList = true;
        this._ActionList = value;
      }
    }

    public List<string> MessageList
    {
      get
      {
        return _MessageList;
      }
      set
      {
        __isset.MessageList = true;
        this._MessageList = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool Category;
      public bool FromUser;
      public bool ToUser;
      public bool ActionList;
      public bool MessageList;
    }

    public JpushMessageParam() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32) {
                Category = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                FromUser = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.String) {
                ToUser = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.List) {
                {
                  ActionList = new List<string>();
                  TList _list0 = iprot.ReadListBegin();
                  for( int _i1 = 0; _i1 < _list0.Count; ++_i1)
                  {
                    string _elem2;
                    _elem2 = iprot.ReadString();
                    ActionList.Add(_elem2);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 5:
              if (field.Type == TType.List) {
                {
                  MessageList = new List<string>();
                  TList _list3 = iprot.ReadListBegin();
                  for( int _i4 = 0; _i4 < _list3.Count; ++_i4)
                  {
                    string _elem5;
                    _elem5 = iprot.ReadString();
                    MessageList.Add(_elem5);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("JpushMessageParam");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.Category) {
          field.Name = "Category";
          field.Type = TType.I32;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Category);
          oprot.WriteFieldEnd();
        }
        if (FromUser != null && __isset.FromUser) {
          field.Name = "FromUser";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(FromUser);
          oprot.WriteFieldEnd();
        }
        if (ToUser != null && __isset.ToUser) {
          field.Name = "ToUser";
          field.Type = TType.String;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(ToUser);
          oprot.WriteFieldEnd();
        }
        if (ActionList != null && __isset.ActionList) {
          field.Name = "ActionList";
          field.Type = TType.List;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.String, ActionList.Count));
            foreach (string _iter6 in ActionList)
            {
              oprot.WriteString(_iter6);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        if (MessageList != null && __isset.MessageList) {
          field.Name = "MessageList";
          field.Type = TType.List;
          field.ID = 5;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.String, MessageList.Count));
            foreach (string _iter7 in MessageList)
            {
              oprot.WriteString(_iter7);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("JpushMessageParam(");
      bool __first = true;
      if (__isset.Category) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Category: ");
        __sb.Append(Category);
      }
      if (FromUser != null && __isset.FromUser) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("FromUser: ");
        __sb.Append(FromUser);
      }
      if (ToUser != null && __isset.ToUser) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("ToUser: ");
        __sb.Append(ToUser);
      }
      if (ActionList != null && __isset.ActionList) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("ActionList: ");
        __sb.Append(ActionList);
      }
      if (MessageList != null && __isset.MessageList) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("MessageList: ");
        __sb.Append(MessageList);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }

}
