/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace CSTJR.RPC.Product.Contracts
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class SearchProductParam : TBase
  {
    private List<int> _productIDs;
    private string _MemberName;
    private List<string> _MemberNames;
    private bool _IsLogin;

    public List<int> ProductIDs
    {
      get
      {
        return _productIDs;
      }
      set
      {
        __isset.productIDs = true;
        this._productIDs = value;
      }
    }

    public string MemberName
    {
      get
      {
        return _MemberName;
      }
      set
      {
        __isset.MemberName = true;
        this._MemberName = value;
      }
    }

    public List<string> MemberNames
    {
      get
      {
        return _MemberNames;
      }
      set
      {
        __isset.MemberNames = true;
        this._MemberNames = value;
      }
    }

    public bool IsLogin
    {
      get
      {
        return _IsLogin;
      }
      set
      {
        __isset.IsLogin = true;
        this._IsLogin = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool productIDs;
      public bool MemberName;
      public bool MemberNames;
      public bool IsLogin;
    }

    public SearchProductParam() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.List) {
                {
                  ProductIDs = new List<int>();
                  TList _list0 = iprot.ReadListBegin();
                  for( int _i1 = 0; _i1 < _list0.Count; ++_i1)
                  {
                    int _elem2;
                    _elem2 = iprot.ReadI32();
                    ProductIDs.Add(_elem2);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                MemberName = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.List) {
                {
                  MemberNames = new List<string>();
                  TList _list3 = iprot.ReadListBegin();
                  for( int _i4 = 0; _i4 < _list3.Count; ++_i4)
                  {
                    string _elem5;
                    _elem5 = iprot.ReadString();
                    MemberNames.Add(_elem5);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.Bool) {
                IsLogin = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("SearchProductParam");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (ProductIDs != null && __isset.productIDs) {
          field.Name = "productIDs";
          field.Type = TType.List;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.I32, ProductIDs.Count));
            foreach (int _iter6 in ProductIDs)
            {
              oprot.WriteI32(_iter6);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        if (MemberName != null && __isset.MemberName) {
          field.Name = "MemberName";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(MemberName);
          oprot.WriteFieldEnd();
        }
        if (MemberNames != null && __isset.MemberNames) {
          field.Name = "MemberNames";
          field.Type = TType.List;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.String, MemberNames.Count));
            foreach (string _iter7 in MemberNames)
            {
              oprot.WriteString(_iter7);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        if (__isset.IsLogin) {
          field.Name = "IsLogin";
          field.Type = TType.Bool;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(IsLogin);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("SearchProductParam(");
      bool __first = true;
      if (ProductIDs != null && __isset.productIDs) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("ProductIDs: ");
        __sb.Append(ProductIDs);
      }
      if (MemberName != null && __isset.MemberName) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("MemberName: ");
        __sb.Append(MemberName);
      }
      if (MemberNames != null && __isset.MemberNames) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("MemberNames: ");
        __sb.Append(MemberNames);
      }
      if (__isset.IsLogin) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("IsLogin: ");
        __sb.Append(IsLogin);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }

}
