/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace CSTJR.RPC.Product.Contracts
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class ProductFundCompanyResult : TBase
  {
    private int _FundID;
    private string _FundLogo;
    private string _FundName;
    private string _FundDesc;

    public int FundID
    {
      get
      {
        return _FundID;
      }
      set
      {
        __isset.FundID = true;
        this._FundID = value;
      }
    }

    public string FundLogo
    {
      get
      {
        return _FundLogo;
      }
      set
      {
        __isset.FundLogo = true;
        this._FundLogo = value;
      }
    }

    public string FundName
    {
      get
      {
        return _FundName;
      }
      set
      {
        __isset.FundName = true;
        this._FundName = value;
      }
    }

    public string FundDesc
    {
      get
      {
        return _FundDesc;
      }
      set
      {
        __isset.FundDesc = true;
        this._FundDesc = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool FundID;
      public bool FundLogo;
      public bool FundName;
      public bool FundDesc;
    }

    public ProductFundCompanyResult() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32) {
                FundID = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                FundLogo = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.String) {
                FundName = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.String) {
                FundDesc = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("ProductFundCompanyResult");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.FundID) {
          field.Name = "FundID";
          field.Type = TType.I32;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(FundID);
          oprot.WriteFieldEnd();
        }
        if (FundLogo != null && __isset.FundLogo) {
          field.Name = "FundLogo";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(FundLogo);
          oprot.WriteFieldEnd();
        }
        if (FundName != null && __isset.FundName) {
          field.Name = "FundName";
          field.Type = TType.String;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(FundName);
          oprot.WriteFieldEnd();
        }
        if (FundDesc != null && __isset.FundDesc) {
          field.Name = "FundDesc";
          field.Type = TType.String;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(FundDesc);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("ProductFundCompanyResult(");
      bool __first = true;
      if (__isset.FundID) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("FundID: ");
        __sb.Append(FundID);
      }
      if (FundLogo != null && __isset.FundLogo) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("FundLogo: ");
        __sb.Append(FundLogo);
      }
      if (FundName != null && __isset.FundName) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("FundName: ");
        __sb.Append(FundName);
      }
      if (FundDesc != null && __isset.FundDesc) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("FundDesc: ");
        __sb.Append(FundDesc);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }

}
