/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace CSTJR.RPC.Member.Contracts
{
  public partial class MemberService {
    public interface ISync {
      UserInfoResult GetUserInfo(string userID);
      PlannerInfoResult GetPlannerInfo(string userID);
      List<UserInfoResult> GetUserInfoBatch(List<string> userIDs);
      List<PlannerInfoResult> GetPlannerInfoBatch(List<string> userIDs);
      List<MemberImpressResult> GetMemberImpressList(string userID);
      void UpdateMemberIntegral(string userID, string userName, int IntegralSource, int payOutIn);
      int TodayIntegral(string userID, List<int> socialID);
      int IntegralCount(string userID);
      string GetProvinceAndCity(string AreaPath);
      List<string> MobileList();
    }

    public interface Iface : ISync {
      #if SILVERLIGHT
      IAsyncResult Begin_GetUserInfo(AsyncCallback callback, object state, string userID);
      UserInfoResult End_GetUserInfo(IAsyncResult asyncResult);
      #endif
      #if SILVERLIGHT
      IAsyncResult Begin_GetPlannerInfo(AsyncCallback callback, object state, string userID);
      PlannerInfoResult End_GetPlannerInfo(IAsyncResult asyncResult);
      #endif
      #if SILVERLIGHT
      IAsyncResult Begin_GetUserInfoBatch(AsyncCallback callback, object state, List<string> userIDs);
      List<UserInfoResult> End_GetUserInfoBatch(IAsyncResult asyncResult);
      #endif
      #if SILVERLIGHT
      IAsyncResult Begin_GetPlannerInfoBatch(AsyncCallback callback, object state, List<string> userIDs);
      List<PlannerInfoResult> End_GetPlannerInfoBatch(IAsyncResult asyncResult);
      #endif
      #if SILVERLIGHT
      IAsyncResult Begin_GetMemberImpressList(AsyncCallback callback, object state, string userID);
      List<MemberImpressResult> End_GetMemberImpressList(IAsyncResult asyncResult);
      #endif
      #if SILVERLIGHT
      IAsyncResult Begin_UpdateMemberIntegral(AsyncCallback callback, object state, string userID, string userName, int IntegralSource, int payOutIn);
      void End_UpdateMemberIntegral(IAsyncResult asyncResult);
      #endif
      #if SILVERLIGHT
      IAsyncResult Begin_TodayIntegral(AsyncCallback callback, object state, string userID, List<int> socialID);
      int End_TodayIntegral(IAsyncResult asyncResult);
      #endif
      #if SILVERLIGHT
      IAsyncResult Begin_IntegralCount(AsyncCallback callback, object state, string userID);
      int End_IntegralCount(IAsyncResult asyncResult);
      #endif
      #if SILVERLIGHT
      IAsyncResult Begin_GetProvinceAndCity(AsyncCallback callback, object state, string AreaPath);
      string End_GetProvinceAndCity(IAsyncResult asyncResult);
      #endif
      #if SILVERLIGHT
      IAsyncResult Begin_MobileList(AsyncCallback callback, object state);
      List<string> End_MobileList(IAsyncResult asyncResult);
      #endif
    }

    public class Client : IDisposable, Iface {
      public Client(TProtocol prot) : this(prot, prot)
      {
      }

      public Client(TProtocol iprot, TProtocol oprot)
      {
        iprot_ = iprot;
        oprot_ = oprot;
      }

      protected TProtocol iprot_;
      protected TProtocol oprot_;
      protected int seqid_;

      public TProtocol InputProtocol
      {
        get { return iprot_; }
      }
      public TProtocol OutputProtocol
      {
        get { return oprot_; }
      }


      #region " IDisposable Support "
      private bool _IsDisposed;

      // IDisposable
      public void Dispose()
      {
        Dispose(true);
      }
      

      protected virtual void Dispose(bool disposing)
      {
        if (!_IsDisposed)
        {
          if (disposing)
          {
            if (iprot_ != null)
            {
              ((IDisposable)iprot_).Dispose();
            }
            if (oprot_ != null)
            {
              ((IDisposable)oprot_).Dispose();
            }
          }
        }
        _IsDisposed = true;
      }
      #endregion


      
      #if SILVERLIGHT
      public IAsyncResult Begin_GetUserInfo(AsyncCallback callback, object state, string userID)
      {
        return send_GetUserInfo(callback, state, userID);
      }

      public UserInfoResult End_GetUserInfo(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_GetUserInfo();
      }

      #endif

      public UserInfoResult GetUserInfo(string userID)
      {
        #if !SILVERLIGHT
        send_GetUserInfo(userID);
        return recv_GetUserInfo();

        #else
        var asyncResult = Begin_GetUserInfo(null, null, userID);
        return End_GetUserInfo(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_GetUserInfo(AsyncCallback callback, object state, string userID)
      #else
      public void send_GetUserInfo(string userID)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("GetUserInfo", TMessageType.Call, seqid_));
        GetUserInfo_args args = new GetUserInfo_args();
        args.UserID = userID;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public UserInfoResult recv_GetUserInfo()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        GetUserInfo_result result = new GetUserInfo_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetUserInfo failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_GetPlannerInfo(AsyncCallback callback, object state, string userID)
      {
        return send_GetPlannerInfo(callback, state, userID);
      }

      public PlannerInfoResult End_GetPlannerInfo(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_GetPlannerInfo();
      }

      #endif

      public PlannerInfoResult GetPlannerInfo(string userID)
      {
        #if !SILVERLIGHT
        send_GetPlannerInfo(userID);
        return recv_GetPlannerInfo();

        #else
        var asyncResult = Begin_GetPlannerInfo(null, null, userID);
        return End_GetPlannerInfo(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_GetPlannerInfo(AsyncCallback callback, object state, string userID)
      #else
      public void send_GetPlannerInfo(string userID)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("GetPlannerInfo", TMessageType.Call, seqid_));
        GetPlannerInfo_args args = new GetPlannerInfo_args();
        args.UserID = userID;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public PlannerInfoResult recv_GetPlannerInfo()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        GetPlannerInfo_result result = new GetPlannerInfo_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetPlannerInfo failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_GetUserInfoBatch(AsyncCallback callback, object state, List<string> userIDs)
      {
        return send_GetUserInfoBatch(callback, state, userIDs);
      }

      public List<UserInfoResult> End_GetUserInfoBatch(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_GetUserInfoBatch();
      }

      #endif

      public List<UserInfoResult> GetUserInfoBatch(List<string> userIDs)
      {
        #if !SILVERLIGHT
        send_GetUserInfoBatch(userIDs);
        return recv_GetUserInfoBatch();

        #else
        var asyncResult = Begin_GetUserInfoBatch(null, null, userIDs);
        return End_GetUserInfoBatch(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_GetUserInfoBatch(AsyncCallback callback, object state, List<string> userIDs)
      #else
      public void send_GetUserInfoBatch(List<string> userIDs)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("GetUserInfoBatch", TMessageType.Call, seqid_));
        GetUserInfoBatch_args args = new GetUserInfoBatch_args();
        args.UserIDs = userIDs;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public List<UserInfoResult> recv_GetUserInfoBatch()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        GetUserInfoBatch_result result = new GetUserInfoBatch_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetUserInfoBatch failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_GetPlannerInfoBatch(AsyncCallback callback, object state, List<string> userIDs)
      {
        return send_GetPlannerInfoBatch(callback, state, userIDs);
      }

      public List<PlannerInfoResult> End_GetPlannerInfoBatch(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_GetPlannerInfoBatch();
      }

      #endif

      public List<PlannerInfoResult> GetPlannerInfoBatch(List<string> userIDs)
      {
        #if !SILVERLIGHT
        send_GetPlannerInfoBatch(userIDs);
        return recv_GetPlannerInfoBatch();

        #else
        var asyncResult = Begin_GetPlannerInfoBatch(null, null, userIDs);
        return End_GetPlannerInfoBatch(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_GetPlannerInfoBatch(AsyncCallback callback, object state, List<string> userIDs)
      #else
      public void send_GetPlannerInfoBatch(List<string> userIDs)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("GetPlannerInfoBatch", TMessageType.Call, seqid_));
        GetPlannerInfoBatch_args args = new GetPlannerInfoBatch_args();
        args.UserIDs = userIDs;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public List<PlannerInfoResult> recv_GetPlannerInfoBatch()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        GetPlannerInfoBatch_result result = new GetPlannerInfoBatch_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetPlannerInfoBatch failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_GetMemberImpressList(AsyncCallback callback, object state, string userID)
      {
        return send_GetMemberImpressList(callback, state, userID);
      }

      public List<MemberImpressResult> End_GetMemberImpressList(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_GetMemberImpressList();
      }

      #endif

      public List<MemberImpressResult> GetMemberImpressList(string userID)
      {
        #if !SILVERLIGHT
        send_GetMemberImpressList(userID);
        return recv_GetMemberImpressList();

        #else
        var asyncResult = Begin_GetMemberImpressList(null, null, userID);
        return End_GetMemberImpressList(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_GetMemberImpressList(AsyncCallback callback, object state, string userID)
      #else
      public void send_GetMemberImpressList(string userID)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("GetMemberImpressList", TMessageType.Call, seqid_));
        GetMemberImpressList_args args = new GetMemberImpressList_args();
        args.UserID = userID;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public List<MemberImpressResult> recv_GetMemberImpressList()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        GetMemberImpressList_result result = new GetMemberImpressList_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetMemberImpressList failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_UpdateMemberIntegral(AsyncCallback callback, object state, string userID, string userName, int IntegralSource, int payOutIn)
      {
        return send_UpdateMemberIntegral(callback, state, userID, userName, IntegralSource, payOutIn);
      }

      public void End_UpdateMemberIntegral(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_UpdateMemberIntegral();
      }

      #endif

      public void UpdateMemberIntegral(string userID, string userName, int IntegralSource, int payOutIn)
      {
        #if !SILVERLIGHT
        send_UpdateMemberIntegral(userID, userName, IntegralSource, payOutIn);
        recv_UpdateMemberIntegral();

        #else
        var asyncResult = Begin_UpdateMemberIntegral(null, null, userID, userName, IntegralSource, payOutIn);
        End_UpdateMemberIntegral(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_UpdateMemberIntegral(AsyncCallback callback, object state, string userID, string userName, int IntegralSource, int payOutIn)
      #else
      public void send_UpdateMemberIntegral(string userID, string userName, int IntegralSource, int payOutIn)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("UpdateMemberIntegral", TMessageType.Call, seqid_));
        UpdateMemberIntegral_args args = new UpdateMemberIntegral_args();
        args.UserID = userID;
        args.UserName = userName;
        args.IntegralSource = IntegralSource;
        args.PayOutIn = payOutIn;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_UpdateMemberIntegral()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        UpdateMemberIntegral_result result = new UpdateMemberIntegral_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_TodayIntegral(AsyncCallback callback, object state, string userID, List<int> socialID)
      {
        return send_TodayIntegral(callback, state, userID, socialID);
      }

      public int End_TodayIntegral(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_TodayIntegral();
      }

      #endif

      public int TodayIntegral(string userID, List<int> socialID)
      {
        #if !SILVERLIGHT
        send_TodayIntegral(userID, socialID);
        return recv_TodayIntegral();

        #else
        var asyncResult = Begin_TodayIntegral(null, null, userID, socialID);
        return End_TodayIntegral(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_TodayIntegral(AsyncCallback callback, object state, string userID, List<int> socialID)
      #else
      public void send_TodayIntegral(string userID, List<int> socialID)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("TodayIntegral", TMessageType.Call, seqid_));
        TodayIntegral_args args = new TodayIntegral_args();
        args.UserID = userID;
        args.SocialID = socialID;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public int recv_TodayIntegral()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        TodayIntegral_result result = new TodayIntegral_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "TodayIntegral failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_IntegralCount(AsyncCallback callback, object state, string userID)
      {
        return send_IntegralCount(callback, state, userID);
      }

      public int End_IntegralCount(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_IntegralCount();
      }

      #endif

      public int IntegralCount(string userID)
      {
        #if !SILVERLIGHT
        send_IntegralCount(userID);
        return recv_IntegralCount();

        #else
        var asyncResult = Begin_IntegralCount(null, null, userID);
        return End_IntegralCount(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_IntegralCount(AsyncCallback callback, object state, string userID)
      #else
      public void send_IntegralCount(string userID)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("IntegralCount", TMessageType.Call, seqid_));
        IntegralCount_args args = new IntegralCount_args();
        args.UserID = userID;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public int recv_IntegralCount()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        IntegralCount_result result = new IntegralCount_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "IntegralCount failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_GetProvinceAndCity(AsyncCallback callback, object state, string AreaPath)
      {
        return send_GetProvinceAndCity(callback, state, AreaPath);
      }

      public string End_GetProvinceAndCity(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_GetProvinceAndCity();
      }

      #endif

      public string GetProvinceAndCity(string AreaPath)
      {
        #if !SILVERLIGHT
        send_GetProvinceAndCity(AreaPath);
        return recv_GetProvinceAndCity();

        #else
        var asyncResult = Begin_GetProvinceAndCity(null, null, AreaPath);
        return End_GetProvinceAndCity(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_GetProvinceAndCity(AsyncCallback callback, object state, string AreaPath)
      #else
      public void send_GetProvinceAndCity(string AreaPath)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("GetProvinceAndCity", TMessageType.Call, seqid_));
        GetProvinceAndCity_args args = new GetProvinceAndCity_args();
        args.AreaPath = AreaPath;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public string recv_GetProvinceAndCity()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        GetProvinceAndCity_result result = new GetProvinceAndCity_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetProvinceAndCity failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_MobileList(AsyncCallback callback, object state)
      {
        return send_MobileList(callback, state);
      }

      public List<string> End_MobileList(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_MobileList();
      }

      #endif

      public List<string> MobileList()
      {
        #if !SILVERLIGHT
        send_MobileList();
        return recv_MobileList();

        #else
        var asyncResult = Begin_MobileList(null, null);
        return End_MobileList(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_MobileList(AsyncCallback callback, object state)
      #else
      public void send_MobileList()
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("MobileList", TMessageType.Call, seqid_));
        MobileList_args args = new MobileList_args();
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public List<string> recv_MobileList()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        MobileList_result result = new MobileList_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "MobileList failed: unknown result");
      }

    }
    public class Processor : TProcessor {
      public Processor(ISync iface)
      {
        iface_ = iface;
        processMap_["GetUserInfo"] = GetUserInfo_Process;
        processMap_["GetPlannerInfo"] = GetPlannerInfo_Process;
        processMap_["GetUserInfoBatch"] = GetUserInfoBatch_Process;
        processMap_["GetPlannerInfoBatch"] = GetPlannerInfoBatch_Process;
        processMap_["GetMemberImpressList"] = GetMemberImpressList_Process;
        processMap_["UpdateMemberIntegral"] = UpdateMemberIntegral_Process;
        processMap_["TodayIntegral"] = TodayIntegral_Process;
        processMap_["IntegralCount"] = IntegralCount_Process;
        processMap_["GetProvinceAndCity"] = GetProvinceAndCity_Process;
        processMap_["MobileList"] = MobileList_Process;
      }

      protected delegate void ProcessFunction(int seqid, TProtocol iprot, TProtocol oprot);
      private ISync iface_;
      protected Dictionary<string, ProcessFunction> processMap_ = new Dictionary<string, ProcessFunction>();

      public bool Process(TProtocol iprot, TProtocol oprot)
      {
        try
        {
          TMessage msg = iprot.ReadMessageBegin();
          ProcessFunction fn;
          processMap_.TryGetValue(msg.Name, out fn);
          if (fn == null) {
            TProtocolUtil.Skip(iprot, TType.Struct);
            iprot.ReadMessageEnd();
            TApplicationException x = new TApplicationException (TApplicationException.ExceptionType.UnknownMethod, "Invalid method name: '" + msg.Name + "'");
            oprot.WriteMessageBegin(new TMessage(msg.Name, TMessageType.Exception, msg.SeqID));
            x.Write(oprot);
            oprot.WriteMessageEnd();
            oprot.Transport.Flush();
            return true;
          }
          fn(msg.SeqID, iprot, oprot);
        }
        catch (IOException)
        {
          return false;
        }
        return true;
      }

      public void GetUserInfo_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        GetUserInfo_args args = new GetUserInfo_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        GetUserInfo_result result = new GetUserInfo_result();
        try
        {
          result.Success = iface_.GetUserInfo(args.UserID);
          oprot.WriteMessageBegin(new TMessage("GetUserInfo", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("GetUserInfo", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void GetPlannerInfo_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        GetPlannerInfo_args args = new GetPlannerInfo_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        GetPlannerInfo_result result = new GetPlannerInfo_result();
        try
        {
          result.Success = iface_.GetPlannerInfo(args.UserID);
          oprot.WriteMessageBegin(new TMessage("GetPlannerInfo", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("GetPlannerInfo", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void GetUserInfoBatch_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        GetUserInfoBatch_args args = new GetUserInfoBatch_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        GetUserInfoBatch_result result = new GetUserInfoBatch_result();
        try
        {
          result.Success = iface_.GetUserInfoBatch(args.UserIDs);
          oprot.WriteMessageBegin(new TMessage("GetUserInfoBatch", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("GetUserInfoBatch", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void GetPlannerInfoBatch_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        GetPlannerInfoBatch_args args = new GetPlannerInfoBatch_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        GetPlannerInfoBatch_result result = new GetPlannerInfoBatch_result();
        try
        {
          result.Success = iface_.GetPlannerInfoBatch(args.UserIDs);
          oprot.WriteMessageBegin(new TMessage("GetPlannerInfoBatch", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("GetPlannerInfoBatch", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void GetMemberImpressList_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        GetMemberImpressList_args args = new GetMemberImpressList_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        GetMemberImpressList_result result = new GetMemberImpressList_result();
        try
        {
          result.Success = iface_.GetMemberImpressList(args.UserID);
          oprot.WriteMessageBegin(new TMessage("GetMemberImpressList", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("GetMemberImpressList", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void UpdateMemberIntegral_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        UpdateMemberIntegral_args args = new UpdateMemberIntegral_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        UpdateMemberIntegral_result result = new UpdateMemberIntegral_result();
        try
        {
          iface_.UpdateMemberIntegral(args.UserID, args.UserName, args.IntegralSource, args.PayOutIn);
          oprot.WriteMessageBegin(new TMessage("UpdateMemberIntegral", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("UpdateMemberIntegral", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void TodayIntegral_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        TodayIntegral_args args = new TodayIntegral_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        TodayIntegral_result result = new TodayIntegral_result();
        try
        {
          result.Success = iface_.TodayIntegral(args.UserID, args.SocialID);
          oprot.WriteMessageBegin(new TMessage("TodayIntegral", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("TodayIntegral", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void IntegralCount_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        IntegralCount_args args = new IntegralCount_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        IntegralCount_result result = new IntegralCount_result();
        try
        {
          result.Success = iface_.IntegralCount(args.UserID);
          oprot.WriteMessageBegin(new TMessage("IntegralCount", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("IntegralCount", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void GetProvinceAndCity_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        GetProvinceAndCity_args args = new GetProvinceAndCity_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        GetProvinceAndCity_result result = new GetProvinceAndCity_result();
        try
        {
          result.Success = iface_.GetProvinceAndCity(args.AreaPath);
          oprot.WriteMessageBegin(new TMessage("GetProvinceAndCity", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("GetProvinceAndCity", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void MobileList_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        MobileList_args args = new MobileList_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        MobileList_result result = new MobileList_result();
        try
        {
          result.Success = iface_.MobileList();
          oprot.WriteMessageBegin(new TMessage("MobileList", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("MobileList", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetUserInfo_args : TBase
    {
      private string _userID;

      public string UserID
      {
        get
        {
          return _userID;
        }
        set
        {
          __isset.userID = true;
          this._userID = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool userID;
      }

      public GetUserInfo_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  UserID = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("GetUserInfo_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (UserID != null && __isset.userID) {
            field.Name = "userID";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(UserID);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("GetUserInfo_args(");
        bool __first = true;
        if (UserID != null && __isset.userID) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("UserID: ");
          __sb.Append(UserID);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetUserInfo_result : TBase
    {
      private UserInfoResult _success;

      public UserInfoResult Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public GetUserInfo_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct) {
                  Success = new UserInfoResult();
                  Success.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("GetUserInfo_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.Struct;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              Success.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("GetUserInfo_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetPlannerInfo_args : TBase
    {
      private string _userID;

      public string UserID
      {
        get
        {
          return _userID;
        }
        set
        {
          __isset.userID = true;
          this._userID = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool userID;
      }

      public GetPlannerInfo_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  UserID = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("GetPlannerInfo_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (UserID != null && __isset.userID) {
            field.Name = "userID";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(UserID);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("GetPlannerInfo_args(");
        bool __first = true;
        if (UserID != null && __isset.userID) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("UserID: ");
          __sb.Append(UserID);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetPlannerInfo_result : TBase
    {
      private PlannerInfoResult _success;

      public PlannerInfoResult Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public GetPlannerInfo_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct) {
                  Success = new PlannerInfoResult();
                  Success.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("GetPlannerInfo_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.Struct;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              Success.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("GetPlannerInfo_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetUserInfoBatch_args : TBase
    {
      private List<string> _userIDs;

      public List<string> UserIDs
      {
        get
        {
          return _userIDs;
        }
        set
        {
          __isset.userIDs = true;
          this._userIDs = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool userIDs;
      }

      public GetUserInfoBatch_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.List) {
                  {
                    UserIDs = new List<string>();
                    TList _list0 = iprot.ReadListBegin();
                    for( int _i1 = 0; _i1 < _list0.Count; ++_i1)
                    {
                      string _elem2;
                      _elem2 = iprot.ReadString();
                      UserIDs.Add(_elem2);
                    }
                    iprot.ReadListEnd();
                  }
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("GetUserInfoBatch_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (UserIDs != null && __isset.userIDs) {
            field.Name = "userIDs";
            field.Type = TType.List;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.String, UserIDs.Count));
              foreach (string _iter3 in UserIDs)
              {
                oprot.WriteString(_iter3);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("GetUserInfoBatch_args(");
        bool __first = true;
        if (UserIDs != null && __isset.userIDs) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("UserIDs: ");
          __sb.Append(UserIDs);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetUserInfoBatch_result : TBase
    {
      private List<UserInfoResult> _success;

      public List<UserInfoResult> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public GetUserInfoBatch_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.List) {
                  {
                    Success = new List<UserInfoResult>();
                    TList _list4 = iprot.ReadListBegin();
                    for( int _i5 = 0; _i5 < _list4.Count; ++_i5)
                    {
                      UserInfoResult _elem6;
                      _elem6 = new UserInfoResult();
                      _elem6.Read(iprot);
                      Success.Add(_elem6);
                    }
                    iprot.ReadListEnd();
                  }
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("GetUserInfoBatch_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.List;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              {
                oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
                foreach (UserInfoResult _iter7 in Success)
                {
                  _iter7.Write(oprot);
                }
                oprot.WriteListEnd();
              }
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("GetUserInfoBatch_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetPlannerInfoBatch_args : TBase
    {
      private List<string> _userIDs;

      public List<string> UserIDs
      {
        get
        {
          return _userIDs;
        }
        set
        {
          __isset.userIDs = true;
          this._userIDs = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool userIDs;
      }

      public GetPlannerInfoBatch_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.List) {
                  {
                    UserIDs = new List<string>();
                    TList _list8 = iprot.ReadListBegin();
                    for( int _i9 = 0; _i9 < _list8.Count; ++_i9)
                    {
                      string _elem10;
                      _elem10 = iprot.ReadString();
                      UserIDs.Add(_elem10);
                    }
                    iprot.ReadListEnd();
                  }
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("GetPlannerInfoBatch_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (UserIDs != null && __isset.userIDs) {
            field.Name = "userIDs";
            field.Type = TType.List;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.String, UserIDs.Count));
              foreach (string _iter11 in UserIDs)
              {
                oprot.WriteString(_iter11);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("GetPlannerInfoBatch_args(");
        bool __first = true;
        if (UserIDs != null && __isset.userIDs) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("UserIDs: ");
          __sb.Append(UserIDs);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetPlannerInfoBatch_result : TBase
    {
      private List<PlannerInfoResult> _success;

      public List<PlannerInfoResult> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public GetPlannerInfoBatch_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.List) {
                  {
                    Success = new List<PlannerInfoResult>();
                    TList _list12 = iprot.ReadListBegin();
                    for( int _i13 = 0; _i13 < _list12.Count; ++_i13)
                    {
                      PlannerInfoResult _elem14;
                      _elem14 = new PlannerInfoResult();
                      _elem14.Read(iprot);
                      Success.Add(_elem14);
                    }
                    iprot.ReadListEnd();
                  }
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("GetPlannerInfoBatch_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.List;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              {
                oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
                foreach (PlannerInfoResult _iter15 in Success)
                {
                  _iter15.Write(oprot);
                }
                oprot.WriteListEnd();
              }
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("GetPlannerInfoBatch_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetMemberImpressList_args : TBase
    {
      private string _userID;

      public string UserID
      {
        get
        {
          return _userID;
        }
        set
        {
          __isset.userID = true;
          this._userID = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool userID;
      }

      public GetMemberImpressList_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  UserID = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("GetMemberImpressList_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (UserID != null && __isset.userID) {
            field.Name = "userID";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(UserID);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("GetMemberImpressList_args(");
        bool __first = true;
        if (UserID != null && __isset.userID) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("UserID: ");
          __sb.Append(UserID);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetMemberImpressList_result : TBase
    {
      private List<MemberImpressResult> _success;

      public List<MemberImpressResult> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public GetMemberImpressList_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.List) {
                  {
                    Success = new List<MemberImpressResult>();
                    TList _list16 = iprot.ReadListBegin();
                    for( int _i17 = 0; _i17 < _list16.Count; ++_i17)
                    {
                      MemberImpressResult _elem18;
                      _elem18 = new MemberImpressResult();
                      _elem18.Read(iprot);
                      Success.Add(_elem18);
                    }
                    iprot.ReadListEnd();
                  }
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("GetMemberImpressList_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.List;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              {
                oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
                foreach (MemberImpressResult _iter19 in Success)
                {
                  _iter19.Write(oprot);
                }
                oprot.WriteListEnd();
              }
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("GetMemberImpressList_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class UpdateMemberIntegral_args : TBase
    {
      private string _userID;
      private string _userName;
      private int _IntegralSource;
      private int _payOutIn;

      public string UserID
      {
        get
        {
          return _userID;
        }
        set
        {
          __isset.userID = true;
          this._userID = value;
        }
      }

      public string UserName
      {
        get
        {
          return _userName;
        }
        set
        {
          __isset.userName = true;
          this._userName = value;
        }
      }

      public int IntegralSource
      {
        get
        {
          return _IntegralSource;
        }
        set
        {
          __isset.IntegralSource = true;
          this._IntegralSource = value;
        }
      }

      public int PayOutIn
      {
        get
        {
          return _payOutIn;
        }
        set
        {
          __isset.payOutIn = true;
          this._payOutIn = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool userID;
        public bool userName;
        public bool IntegralSource;
        public bool payOutIn;
      }

      public UpdateMemberIntegral_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  UserID = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.String) {
                  UserName = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 3:
                if (field.Type == TType.I32) {
                  IntegralSource = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 4:
                if (field.Type == TType.I32) {
                  PayOutIn = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("UpdateMemberIntegral_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (UserID != null && __isset.userID) {
            field.Name = "userID";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(UserID);
            oprot.WriteFieldEnd();
          }
          if (UserName != null && __isset.userName) {
            field.Name = "userName";
            field.Type = TType.String;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(UserName);
            oprot.WriteFieldEnd();
          }
          if (__isset.IntegralSource) {
            field.Name = "IntegralSource";
            field.Type = TType.I32;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(IntegralSource);
            oprot.WriteFieldEnd();
          }
          if (__isset.payOutIn) {
            field.Name = "payOutIn";
            field.Type = TType.I32;
            field.ID = 4;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(PayOutIn);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("UpdateMemberIntegral_args(");
        bool __first = true;
        if (UserID != null && __isset.userID) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("UserID: ");
          __sb.Append(UserID);
        }
        if (UserName != null && __isset.userName) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("UserName: ");
          __sb.Append(UserName);
        }
        if (__isset.IntegralSource) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("IntegralSource: ");
          __sb.Append(IntegralSource);
        }
        if (__isset.payOutIn) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("PayOutIn: ");
          __sb.Append(PayOutIn);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class UpdateMemberIntegral_result : TBase
    {

      public UpdateMemberIntegral_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("UpdateMemberIntegral_result");
          oprot.WriteStructBegin(struc);

          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("UpdateMemberIntegral_result(");
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class TodayIntegral_args : TBase
    {
      private string _userID;
      private List<int> _socialID;

      public string UserID
      {
        get
        {
          return _userID;
        }
        set
        {
          __isset.userID = true;
          this._userID = value;
        }
      }

      public List<int> SocialID
      {
        get
        {
          return _socialID;
        }
        set
        {
          __isset.socialID = true;
          this._socialID = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool userID;
        public bool socialID;
      }

      public TodayIntegral_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  UserID = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.List) {
                  {
                    SocialID = new List<int>();
                    TList _list20 = iprot.ReadListBegin();
                    for( int _i21 = 0; _i21 < _list20.Count; ++_i21)
                    {
                      int _elem22;
                      _elem22 = iprot.ReadI32();
                      SocialID.Add(_elem22);
                    }
                    iprot.ReadListEnd();
                  }
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("TodayIntegral_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (UserID != null && __isset.userID) {
            field.Name = "userID";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(UserID);
            oprot.WriteFieldEnd();
          }
          if (SocialID != null && __isset.socialID) {
            field.Name = "socialID";
            field.Type = TType.List;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.I32, SocialID.Count));
              foreach (int _iter23 in SocialID)
              {
                oprot.WriteI32(_iter23);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("TodayIntegral_args(");
        bool __first = true;
        if (UserID != null && __isset.userID) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("UserID: ");
          __sb.Append(UserID);
        }
        if (SocialID != null && __isset.socialID) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("SocialID: ");
          __sb.Append(SocialID);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class TodayIntegral_result : TBase
    {
      private int _success;

      public int Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public TodayIntegral_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.I32) {
                  Success = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("TodayIntegral_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            field.Name = "Success";
            field.Type = TType.I32;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(Success);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("TodayIntegral_result(");
        bool __first = true;
        if (__isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class IntegralCount_args : TBase
    {
      private string _userID;

      public string UserID
      {
        get
        {
          return _userID;
        }
        set
        {
          __isset.userID = true;
          this._userID = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool userID;
      }

      public IntegralCount_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  UserID = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("IntegralCount_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (UserID != null && __isset.userID) {
            field.Name = "userID";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(UserID);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("IntegralCount_args(");
        bool __first = true;
        if (UserID != null && __isset.userID) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("UserID: ");
          __sb.Append(UserID);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class IntegralCount_result : TBase
    {
      private int _success;

      public int Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public IntegralCount_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.I32) {
                  Success = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("IntegralCount_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            field.Name = "Success";
            field.Type = TType.I32;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(Success);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("IntegralCount_result(");
        bool __first = true;
        if (__isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetProvinceAndCity_args : TBase
    {
      private string _AreaPath;

      public string AreaPath
      {
        get
        {
          return _AreaPath;
        }
        set
        {
          __isset.AreaPath = true;
          this._AreaPath = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool AreaPath;
      }

      public GetProvinceAndCity_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  AreaPath = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("GetProvinceAndCity_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (AreaPath != null && __isset.AreaPath) {
            field.Name = "AreaPath";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(AreaPath);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("GetProvinceAndCity_args(");
        bool __first = true;
        if (AreaPath != null && __isset.AreaPath) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("AreaPath: ");
          __sb.Append(AreaPath);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetProvinceAndCity_result : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public GetProvinceAndCity_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String) {
                  Success = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("GetProvinceAndCity_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              oprot.WriteString(Success);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("GetProvinceAndCity_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class MobileList_args : TBase
    {

      public MobileList_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("MobileList_args");
          oprot.WriteStructBegin(struc);
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("MobileList_args(");
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class MobileList_result : TBase
    {
      private List<string> _success;

      public List<string> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public MobileList_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.List) {
                  {
                    Success = new List<string>();
                    TList _list24 = iprot.ReadListBegin();
                    for( int _i25 = 0; _i25 < _list24.Count; ++_i25)
                    {
                      string _elem26;
                      _elem26 = iprot.ReadString();
                      Success.Add(_elem26);
                    }
                    iprot.ReadListEnd();
                  }
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("MobileList_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.List;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              {
                oprot.WriteListBegin(new TList(TType.String, Success.Count));
                foreach (string _iter27 in Success)
                {
                  oprot.WriteString(_iter27);
                }
                oprot.WriteListEnd();
              }
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("MobileList_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }

  }
}
