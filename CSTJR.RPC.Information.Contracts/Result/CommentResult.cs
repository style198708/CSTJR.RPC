/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace CSTJR.RPC.Information.Contracts
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class CommentResult : TBase
  {
    private int _CommentID;
    private int _CommentType;
    private int _RelationID;
    private string _RelationName;
    private int _ParentID;
    private string _CommentContent;
    private string _MemberName;
    private int _IsFabulous;
    private int _IsDelete;
    private int _FabulousCount;
    private string _MemberLogo;
    private string _NickName;
    private string _CommentTime;
    private string _CreateTime;
    private List<CommentResult> _CommentList;

    public int CommentID
    {
      get
      {
        return _CommentID;
      }
      set
      {
        __isset.CommentID = true;
        this._CommentID = value;
      }
    }

    public int CommentType
    {
      get
      {
        return _CommentType;
      }
      set
      {
        __isset.CommentType = true;
        this._CommentType = value;
      }
    }

    public int RelationID
    {
      get
      {
        return _RelationID;
      }
      set
      {
        __isset.RelationID = true;
        this._RelationID = value;
      }
    }

    public string RelationName
    {
      get
      {
        return _RelationName;
      }
      set
      {
        __isset.RelationName = true;
        this._RelationName = value;
      }
    }

    public int ParentID
    {
      get
      {
        return _ParentID;
      }
      set
      {
        __isset.ParentID = true;
        this._ParentID = value;
      }
    }

    public string CommentContent
    {
      get
      {
        return _CommentContent;
      }
      set
      {
        __isset.CommentContent = true;
        this._CommentContent = value;
      }
    }

    public string MemberName
    {
      get
      {
        return _MemberName;
      }
      set
      {
        __isset.MemberName = true;
        this._MemberName = value;
      }
    }

    public int IsFabulous
    {
      get
      {
        return _IsFabulous;
      }
      set
      {
        __isset.IsFabulous = true;
        this._IsFabulous = value;
      }
    }

    public int IsDelete
    {
      get
      {
        return _IsDelete;
      }
      set
      {
        __isset.IsDelete = true;
        this._IsDelete = value;
      }
    }

    public int FabulousCount
    {
      get
      {
        return _FabulousCount;
      }
      set
      {
        __isset.FabulousCount = true;
        this._FabulousCount = value;
      }
    }

    public string MemberLogo
    {
      get
      {
        return _MemberLogo;
      }
      set
      {
        __isset.MemberLogo = true;
        this._MemberLogo = value;
      }
    }

    public string NickName
    {
      get
      {
        return _NickName;
      }
      set
      {
        __isset.NickName = true;
        this._NickName = value;
      }
    }

    public string CommentTime
    {
      get
      {
        return _CommentTime;
      }
      set
      {
        __isset.CommentTime = true;
        this._CommentTime = value;
      }
    }

    public string CreateTime
    {
      get
      {
        return _CreateTime;
      }
      set
      {
        __isset.CreateTime = true;
        this._CreateTime = value;
      }
    }

    public List<CommentResult> CommentList
    {
      get
      {
        return _CommentList;
      }
      set
      {
        __isset.CommentList = true;
        this._CommentList = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool CommentID;
      public bool CommentType;
      public bool RelationID;
      public bool RelationName;
      public bool ParentID;
      public bool CommentContent;
      public bool MemberName;
      public bool IsFabulous;
      public bool IsDelete;
      public bool FabulousCount;
      public bool MemberLogo;
      public bool NickName;
      public bool CommentTime;
      public bool CreateTime;
      public bool CommentList;
    }

    public CommentResult() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32) {
                CommentID = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.I32) {
                CommentType = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.I32) {
                RelationID = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.String) {
                RelationName = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 5:
              if (field.Type == TType.I32) {
                ParentID = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 6:
              if (field.Type == TType.String) {
                CommentContent = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 7:
              if (field.Type == TType.String) {
                MemberName = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 8:
              if (field.Type == TType.I32) {
                IsFabulous = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 9:
              if (field.Type == TType.I32) {
                IsDelete = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 10:
              if (field.Type == TType.I32) {
                FabulousCount = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 11:
              if (field.Type == TType.String) {
                MemberLogo = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 12:
              if (field.Type == TType.String) {
                NickName = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 13:
              if (field.Type == TType.String) {
                CommentTime = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 14:
              if (field.Type == TType.String) {
                CreateTime = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 15:
              if (field.Type == TType.List) {
                {
                  CommentList = new List<CommentResult>();
                  TList _list0 = iprot.ReadListBegin();
                  for( int _i1 = 0; _i1 < _list0.Count; ++_i1)
                  {
                    CommentResult _elem2;
                    _elem2 = new CommentResult();
                    _elem2.Read(iprot);
                    CommentList.Add(_elem2);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("CommentResult");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.CommentID) {
          field.Name = "CommentID";
          field.Type = TType.I32;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(CommentID);
          oprot.WriteFieldEnd();
        }
        if (__isset.CommentType) {
          field.Name = "CommentType";
          field.Type = TType.I32;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(CommentType);
          oprot.WriteFieldEnd();
        }
        if (__isset.RelationID) {
          field.Name = "RelationID";
          field.Type = TType.I32;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(RelationID);
          oprot.WriteFieldEnd();
        }
        if (RelationName != null && __isset.RelationName) {
          field.Name = "RelationName";
          field.Type = TType.String;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(RelationName);
          oprot.WriteFieldEnd();
        }
        if (__isset.ParentID) {
          field.Name = "ParentID";
          field.Type = TType.I32;
          field.ID = 5;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(ParentID);
          oprot.WriteFieldEnd();
        }
        if (CommentContent != null && __isset.CommentContent) {
          field.Name = "CommentContent";
          field.Type = TType.String;
          field.ID = 6;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(CommentContent);
          oprot.WriteFieldEnd();
        }
        if (MemberName != null && __isset.MemberName) {
          field.Name = "MemberName";
          field.Type = TType.String;
          field.ID = 7;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(MemberName);
          oprot.WriteFieldEnd();
        }
        if (__isset.IsFabulous) {
          field.Name = "IsFabulous";
          field.Type = TType.I32;
          field.ID = 8;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(IsFabulous);
          oprot.WriteFieldEnd();
        }
        if (__isset.IsDelete) {
          field.Name = "IsDelete";
          field.Type = TType.I32;
          field.ID = 9;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(IsDelete);
          oprot.WriteFieldEnd();
        }
        if (__isset.FabulousCount) {
          field.Name = "FabulousCount";
          field.Type = TType.I32;
          field.ID = 10;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(FabulousCount);
          oprot.WriteFieldEnd();
        }
        if (MemberLogo != null && __isset.MemberLogo) {
          field.Name = "MemberLogo";
          field.Type = TType.String;
          field.ID = 11;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(MemberLogo);
          oprot.WriteFieldEnd();
        }
        if (NickName != null && __isset.NickName) {
          field.Name = "NickName";
          field.Type = TType.String;
          field.ID = 12;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(NickName);
          oprot.WriteFieldEnd();
        }
        if (CommentTime != null && __isset.CommentTime) {
          field.Name = "CommentTime";
          field.Type = TType.String;
          field.ID = 13;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(CommentTime);
          oprot.WriteFieldEnd();
        }
        if (CreateTime != null && __isset.CreateTime) {
          field.Name = "CreateTime";
          field.Type = TType.String;
          field.ID = 14;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(CreateTime);
          oprot.WriteFieldEnd();
        }
        if (CommentList != null && __isset.CommentList) {
          field.Name = "CommentList";
          field.Type = TType.List;
          field.ID = 15;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.Struct, CommentList.Count));
            foreach (CommentResult _iter3 in CommentList)
            {
              _iter3.Write(oprot);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("CommentResult(");
      bool __first = true;
      if (__isset.CommentID) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("CommentID: ");
        __sb.Append(CommentID);
      }
      if (__isset.CommentType) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("CommentType: ");
        __sb.Append(CommentType);
      }
      if (__isset.RelationID) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("RelationID: ");
        __sb.Append(RelationID);
      }
      if (RelationName != null && __isset.RelationName) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("RelationName: ");
        __sb.Append(RelationName);
      }
      if (__isset.ParentID) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("ParentID: ");
        __sb.Append(ParentID);
      }
      if (CommentContent != null && __isset.CommentContent) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("CommentContent: ");
        __sb.Append(CommentContent);
      }
      if (MemberName != null && __isset.MemberName) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("MemberName: ");
        __sb.Append(MemberName);
      }
      if (__isset.IsFabulous) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("IsFabulous: ");
        __sb.Append(IsFabulous);
      }
      if (__isset.IsDelete) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("IsDelete: ");
        __sb.Append(IsDelete);
      }
      if (__isset.FabulousCount) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("FabulousCount: ");
        __sb.Append(FabulousCount);
      }
      if (MemberLogo != null && __isset.MemberLogo) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("MemberLogo: ");
        __sb.Append(MemberLogo);
      }
      if (NickName != null && __isset.NickName) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("NickName: ");
        __sb.Append(NickName);
      }
      if (CommentTime != null && __isset.CommentTime) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("CommentTime: ");
        __sb.Append(CommentTime);
      }
      if (CreateTime != null && __isset.CreateTime) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("CreateTime: ");
        __sb.Append(CreateTime);
      }
      if (CommentList != null && __isset.CommentList) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("CommentList: ");
        __sb.Append(CommentList);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }

}
