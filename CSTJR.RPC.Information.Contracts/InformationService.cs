/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace CSTJR.RPC.Information.Contracts
{
  public partial class InformationService {
    public interface ISync {
      List<FollowMember> GetMyFollowMember(string memberName);
      bool IsFollowing(string memberName, string myID);
      List<string> GetAllFollowMember(string memberName);
      bool DeleteCollection(string memberName, string userName, int collectionID);
      int GetPostFabulousCount(string memberName);
      int GetColumnFabulousCount(string memberName);
      int GetCommentFabulousCount(string memberName);
      int GetFollowMeCount(string memberName);
      int GetFollowCount(string memberName);
      int GetFabulousCount(string memberName);
      List<CommentResult> GetCommentList(string memberName, int RelationID, int CommentType);
    }

    public interface Iface : ISync {
      #if SILVERLIGHT
      IAsyncResult Begin_GetMyFollowMember(AsyncCallback callback, object state, string memberName);
      List<FollowMember> End_GetMyFollowMember(IAsyncResult asyncResult);
      #endif
      #if SILVERLIGHT
      IAsyncResult Begin_IsFollowing(AsyncCallback callback, object state, string memberName, string myID);
      bool End_IsFollowing(IAsyncResult asyncResult);
      #endif
      #if SILVERLIGHT
      IAsyncResult Begin_GetAllFollowMember(AsyncCallback callback, object state, string memberName);
      List<string> End_GetAllFollowMember(IAsyncResult asyncResult);
      #endif
      #if SILVERLIGHT
      IAsyncResult Begin_DeleteCollection(AsyncCallback callback, object state, string memberName, string userName, int collectionID);
      bool End_DeleteCollection(IAsyncResult asyncResult);
      #endif
      #if SILVERLIGHT
      IAsyncResult Begin_GetPostFabulousCount(AsyncCallback callback, object state, string memberName);
      int End_GetPostFabulousCount(IAsyncResult asyncResult);
      #endif
      #if SILVERLIGHT
      IAsyncResult Begin_GetColumnFabulousCount(AsyncCallback callback, object state, string memberName);
      int End_GetColumnFabulousCount(IAsyncResult asyncResult);
      #endif
      #if SILVERLIGHT
      IAsyncResult Begin_GetCommentFabulousCount(AsyncCallback callback, object state, string memberName);
      int End_GetCommentFabulousCount(IAsyncResult asyncResult);
      #endif
      #if SILVERLIGHT
      IAsyncResult Begin_GetFollowMeCount(AsyncCallback callback, object state, string memberName);
      int End_GetFollowMeCount(IAsyncResult asyncResult);
      #endif
      #if SILVERLIGHT
      IAsyncResult Begin_GetFollowCount(AsyncCallback callback, object state, string memberName);
      int End_GetFollowCount(IAsyncResult asyncResult);
      #endif
      #if SILVERLIGHT
      IAsyncResult Begin_GetFabulousCount(AsyncCallback callback, object state, string memberName);
      int End_GetFabulousCount(IAsyncResult asyncResult);
      #endif
      #if SILVERLIGHT
      IAsyncResult Begin_GetCommentList(AsyncCallback callback, object state, string memberName, int RelationID, int CommentType);
      List<CommentResult> End_GetCommentList(IAsyncResult asyncResult);
      #endif
    }

    public class Client : IDisposable, Iface {
      public Client(TProtocol prot) : this(prot, prot)
      {
      }

      public Client(TProtocol iprot, TProtocol oprot)
      {
        iprot_ = iprot;
        oprot_ = oprot;
      }

      protected TProtocol iprot_;
      protected TProtocol oprot_;
      protected int seqid_;

      public TProtocol InputProtocol
      {
        get { return iprot_; }
      }
      public TProtocol OutputProtocol
      {
        get { return oprot_; }
      }


      #region " IDisposable Support "
      private bool _IsDisposed;

      // IDisposable
      public void Dispose()
      {
        Dispose(true);
      }
      

      protected virtual void Dispose(bool disposing)
      {
        if (!_IsDisposed)
        {
          if (disposing)
          {
            if (iprot_ != null)
            {
              ((IDisposable)iprot_).Dispose();
            }
            if (oprot_ != null)
            {
              ((IDisposable)oprot_).Dispose();
            }
          }
        }
        _IsDisposed = true;
      }
      #endregion


      
      #if SILVERLIGHT
      public IAsyncResult Begin_GetMyFollowMember(AsyncCallback callback, object state, string memberName)
      {
        return send_GetMyFollowMember(callback, state, memberName);
      }

      public List<FollowMember> End_GetMyFollowMember(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_GetMyFollowMember();
      }

      #endif

      public List<FollowMember> GetMyFollowMember(string memberName)
      {
        #if !SILVERLIGHT
        send_GetMyFollowMember(memberName);
        return recv_GetMyFollowMember();

        #else
        var asyncResult = Begin_GetMyFollowMember(null, null, memberName);
        return End_GetMyFollowMember(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_GetMyFollowMember(AsyncCallback callback, object state, string memberName)
      #else
      public void send_GetMyFollowMember(string memberName)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("GetMyFollowMember", TMessageType.Call, seqid_));
        GetMyFollowMember_args args = new GetMyFollowMember_args();
        args.MemberName = memberName;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public List<FollowMember> recv_GetMyFollowMember()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        GetMyFollowMember_result result = new GetMyFollowMember_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetMyFollowMember failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_IsFollowing(AsyncCallback callback, object state, string memberName, string myID)
      {
        return send_IsFollowing(callback, state, memberName, myID);
      }

      public bool End_IsFollowing(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_IsFollowing();
      }

      #endif

      public bool IsFollowing(string memberName, string myID)
      {
        #if !SILVERLIGHT
        send_IsFollowing(memberName, myID);
        return recv_IsFollowing();

        #else
        var asyncResult = Begin_IsFollowing(null, null, memberName, myID);
        return End_IsFollowing(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_IsFollowing(AsyncCallback callback, object state, string memberName, string myID)
      #else
      public void send_IsFollowing(string memberName, string myID)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("IsFollowing", TMessageType.Call, seqid_));
        IsFollowing_args args = new IsFollowing_args();
        args.MemberName = memberName;
        args.MyID = myID;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public bool recv_IsFollowing()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        IsFollowing_result result = new IsFollowing_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "IsFollowing failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_GetAllFollowMember(AsyncCallback callback, object state, string memberName)
      {
        return send_GetAllFollowMember(callback, state, memberName);
      }

      public List<string> End_GetAllFollowMember(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_GetAllFollowMember();
      }

      #endif

      public List<string> GetAllFollowMember(string memberName)
      {
        #if !SILVERLIGHT
        send_GetAllFollowMember(memberName);
        return recv_GetAllFollowMember();

        #else
        var asyncResult = Begin_GetAllFollowMember(null, null, memberName);
        return End_GetAllFollowMember(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_GetAllFollowMember(AsyncCallback callback, object state, string memberName)
      #else
      public void send_GetAllFollowMember(string memberName)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("GetAllFollowMember", TMessageType.Call, seqid_));
        GetAllFollowMember_args args = new GetAllFollowMember_args();
        args.MemberName = memberName;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public List<string> recv_GetAllFollowMember()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        GetAllFollowMember_result result = new GetAllFollowMember_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetAllFollowMember failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_DeleteCollection(AsyncCallback callback, object state, string memberName, string userName, int collectionID)
      {
        return send_DeleteCollection(callback, state, memberName, userName, collectionID);
      }

      public bool End_DeleteCollection(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_DeleteCollection();
      }

      #endif

      public bool DeleteCollection(string memberName, string userName, int collectionID)
      {
        #if !SILVERLIGHT
        send_DeleteCollection(memberName, userName, collectionID);
        return recv_DeleteCollection();

        #else
        var asyncResult = Begin_DeleteCollection(null, null, memberName, userName, collectionID);
        return End_DeleteCollection(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_DeleteCollection(AsyncCallback callback, object state, string memberName, string userName, int collectionID)
      #else
      public void send_DeleteCollection(string memberName, string userName, int collectionID)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("DeleteCollection", TMessageType.Call, seqid_));
        DeleteCollection_args args = new DeleteCollection_args();
        args.MemberName = memberName;
        args.UserName = userName;
        args.CollectionID = collectionID;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public bool recv_DeleteCollection()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        DeleteCollection_result result = new DeleteCollection_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "DeleteCollection failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_GetPostFabulousCount(AsyncCallback callback, object state, string memberName)
      {
        return send_GetPostFabulousCount(callback, state, memberName);
      }

      public int End_GetPostFabulousCount(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_GetPostFabulousCount();
      }

      #endif

      public int GetPostFabulousCount(string memberName)
      {
        #if !SILVERLIGHT
        send_GetPostFabulousCount(memberName);
        return recv_GetPostFabulousCount();

        #else
        var asyncResult = Begin_GetPostFabulousCount(null, null, memberName);
        return End_GetPostFabulousCount(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_GetPostFabulousCount(AsyncCallback callback, object state, string memberName)
      #else
      public void send_GetPostFabulousCount(string memberName)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("GetPostFabulousCount", TMessageType.Call, seqid_));
        GetPostFabulousCount_args args = new GetPostFabulousCount_args();
        args.MemberName = memberName;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public int recv_GetPostFabulousCount()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        GetPostFabulousCount_result result = new GetPostFabulousCount_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetPostFabulousCount failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_GetColumnFabulousCount(AsyncCallback callback, object state, string memberName)
      {
        return send_GetColumnFabulousCount(callback, state, memberName);
      }

      public int End_GetColumnFabulousCount(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_GetColumnFabulousCount();
      }

      #endif

      public int GetColumnFabulousCount(string memberName)
      {
        #if !SILVERLIGHT
        send_GetColumnFabulousCount(memberName);
        return recv_GetColumnFabulousCount();

        #else
        var asyncResult = Begin_GetColumnFabulousCount(null, null, memberName);
        return End_GetColumnFabulousCount(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_GetColumnFabulousCount(AsyncCallback callback, object state, string memberName)
      #else
      public void send_GetColumnFabulousCount(string memberName)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("GetColumnFabulousCount", TMessageType.Call, seqid_));
        GetColumnFabulousCount_args args = new GetColumnFabulousCount_args();
        args.MemberName = memberName;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public int recv_GetColumnFabulousCount()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        GetColumnFabulousCount_result result = new GetColumnFabulousCount_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetColumnFabulousCount failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_GetCommentFabulousCount(AsyncCallback callback, object state, string memberName)
      {
        return send_GetCommentFabulousCount(callback, state, memberName);
      }

      public int End_GetCommentFabulousCount(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_GetCommentFabulousCount();
      }

      #endif

      public int GetCommentFabulousCount(string memberName)
      {
        #if !SILVERLIGHT
        send_GetCommentFabulousCount(memberName);
        return recv_GetCommentFabulousCount();

        #else
        var asyncResult = Begin_GetCommentFabulousCount(null, null, memberName);
        return End_GetCommentFabulousCount(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_GetCommentFabulousCount(AsyncCallback callback, object state, string memberName)
      #else
      public void send_GetCommentFabulousCount(string memberName)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("GetCommentFabulousCount", TMessageType.Call, seqid_));
        GetCommentFabulousCount_args args = new GetCommentFabulousCount_args();
        args.MemberName = memberName;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public int recv_GetCommentFabulousCount()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        GetCommentFabulousCount_result result = new GetCommentFabulousCount_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetCommentFabulousCount failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_GetFollowMeCount(AsyncCallback callback, object state, string memberName)
      {
        return send_GetFollowMeCount(callback, state, memberName);
      }

      public int End_GetFollowMeCount(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_GetFollowMeCount();
      }

      #endif

      public int GetFollowMeCount(string memberName)
      {
        #if !SILVERLIGHT
        send_GetFollowMeCount(memberName);
        return recv_GetFollowMeCount();

        #else
        var asyncResult = Begin_GetFollowMeCount(null, null, memberName);
        return End_GetFollowMeCount(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_GetFollowMeCount(AsyncCallback callback, object state, string memberName)
      #else
      public void send_GetFollowMeCount(string memberName)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("GetFollowMeCount", TMessageType.Call, seqid_));
        GetFollowMeCount_args args = new GetFollowMeCount_args();
        args.MemberName = memberName;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public int recv_GetFollowMeCount()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        GetFollowMeCount_result result = new GetFollowMeCount_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetFollowMeCount failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_GetFollowCount(AsyncCallback callback, object state, string memberName)
      {
        return send_GetFollowCount(callback, state, memberName);
      }

      public int End_GetFollowCount(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_GetFollowCount();
      }

      #endif

      public int GetFollowCount(string memberName)
      {
        #if !SILVERLIGHT
        send_GetFollowCount(memberName);
        return recv_GetFollowCount();

        #else
        var asyncResult = Begin_GetFollowCount(null, null, memberName);
        return End_GetFollowCount(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_GetFollowCount(AsyncCallback callback, object state, string memberName)
      #else
      public void send_GetFollowCount(string memberName)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("GetFollowCount", TMessageType.Call, seqid_));
        GetFollowCount_args args = new GetFollowCount_args();
        args.MemberName = memberName;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public int recv_GetFollowCount()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        GetFollowCount_result result = new GetFollowCount_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetFollowCount failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_GetFabulousCount(AsyncCallback callback, object state, string memberName)
      {
        return send_GetFabulousCount(callback, state, memberName);
      }

      public int End_GetFabulousCount(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_GetFabulousCount();
      }

      #endif

      public int GetFabulousCount(string memberName)
      {
        #if !SILVERLIGHT
        send_GetFabulousCount(memberName);
        return recv_GetFabulousCount();

        #else
        var asyncResult = Begin_GetFabulousCount(null, null, memberName);
        return End_GetFabulousCount(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_GetFabulousCount(AsyncCallback callback, object state, string memberName)
      #else
      public void send_GetFabulousCount(string memberName)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("GetFabulousCount", TMessageType.Call, seqid_));
        GetFabulousCount_args args = new GetFabulousCount_args();
        args.MemberName = memberName;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public int recv_GetFabulousCount()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        GetFabulousCount_result result = new GetFabulousCount_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetFabulousCount failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_GetCommentList(AsyncCallback callback, object state, string memberName, int RelationID, int CommentType)
      {
        return send_GetCommentList(callback, state, memberName, RelationID, CommentType);
      }

      public List<CommentResult> End_GetCommentList(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_GetCommentList();
      }

      #endif

      public List<CommentResult> GetCommentList(string memberName, int RelationID, int CommentType)
      {
        #if !SILVERLIGHT
        send_GetCommentList(memberName, RelationID, CommentType);
        return recv_GetCommentList();

        #else
        var asyncResult = Begin_GetCommentList(null, null, memberName, RelationID, CommentType);
        return End_GetCommentList(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_GetCommentList(AsyncCallback callback, object state, string memberName, int RelationID, int CommentType)
      #else
      public void send_GetCommentList(string memberName, int RelationID, int CommentType)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("GetCommentList", TMessageType.Call, seqid_));
        GetCommentList_args args = new GetCommentList_args();
        args.MemberName = memberName;
        args.RelationID = RelationID;
        args.CommentType = CommentType;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public List<CommentResult> recv_GetCommentList()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        GetCommentList_result result = new GetCommentList_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetCommentList failed: unknown result");
      }

    }
    public class Processor : TProcessor {
      public Processor(ISync iface)
      {
        iface_ = iface;
        processMap_["GetMyFollowMember"] = GetMyFollowMember_Process;
        processMap_["IsFollowing"] = IsFollowing_Process;
        processMap_["GetAllFollowMember"] = GetAllFollowMember_Process;
        processMap_["DeleteCollection"] = DeleteCollection_Process;
        processMap_["GetPostFabulousCount"] = GetPostFabulousCount_Process;
        processMap_["GetColumnFabulousCount"] = GetColumnFabulousCount_Process;
        processMap_["GetCommentFabulousCount"] = GetCommentFabulousCount_Process;
        processMap_["GetFollowMeCount"] = GetFollowMeCount_Process;
        processMap_["GetFollowCount"] = GetFollowCount_Process;
        processMap_["GetFabulousCount"] = GetFabulousCount_Process;
        processMap_["GetCommentList"] = GetCommentList_Process;
      }

      protected delegate void ProcessFunction(int seqid, TProtocol iprot, TProtocol oprot);
      private ISync iface_;
      protected Dictionary<string, ProcessFunction> processMap_ = new Dictionary<string, ProcessFunction>();

      public bool Process(TProtocol iprot, TProtocol oprot)
      {
        try
        {
          TMessage msg = iprot.ReadMessageBegin();
          ProcessFunction fn;
          processMap_.TryGetValue(msg.Name, out fn);
          if (fn == null) {
            TProtocolUtil.Skip(iprot, TType.Struct);
            iprot.ReadMessageEnd();
            TApplicationException x = new TApplicationException (TApplicationException.ExceptionType.UnknownMethod, "Invalid method name: '" + msg.Name + "'");
            oprot.WriteMessageBegin(new TMessage(msg.Name, TMessageType.Exception, msg.SeqID));
            x.Write(oprot);
            oprot.WriteMessageEnd();
            oprot.Transport.Flush();
            return true;
          }
          fn(msg.SeqID, iprot, oprot);
        }
        catch (IOException)
        {
          return false;
        }
        return true;
      }

      public void GetMyFollowMember_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        GetMyFollowMember_args args = new GetMyFollowMember_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        GetMyFollowMember_result result = new GetMyFollowMember_result();
        try
        {
          result.Success = iface_.GetMyFollowMember(args.MemberName);
          oprot.WriteMessageBegin(new TMessage("GetMyFollowMember", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("GetMyFollowMember", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void IsFollowing_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        IsFollowing_args args = new IsFollowing_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        IsFollowing_result result = new IsFollowing_result();
        try
        {
          result.Success = iface_.IsFollowing(args.MemberName, args.MyID);
          oprot.WriteMessageBegin(new TMessage("IsFollowing", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("IsFollowing", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void GetAllFollowMember_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        GetAllFollowMember_args args = new GetAllFollowMember_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        GetAllFollowMember_result result = new GetAllFollowMember_result();
        try
        {
          result.Success = iface_.GetAllFollowMember(args.MemberName);
          oprot.WriteMessageBegin(new TMessage("GetAllFollowMember", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("GetAllFollowMember", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void DeleteCollection_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        DeleteCollection_args args = new DeleteCollection_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        DeleteCollection_result result = new DeleteCollection_result();
        try
        {
          result.Success = iface_.DeleteCollection(args.MemberName, args.UserName, args.CollectionID);
          oprot.WriteMessageBegin(new TMessage("DeleteCollection", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("DeleteCollection", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void GetPostFabulousCount_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        GetPostFabulousCount_args args = new GetPostFabulousCount_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        GetPostFabulousCount_result result = new GetPostFabulousCount_result();
        try
        {
          result.Success = iface_.GetPostFabulousCount(args.MemberName);
          oprot.WriteMessageBegin(new TMessage("GetPostFabulousCount", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("GetPostFabulousCount", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void GetColumnFabulousCount_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        GetColumnFabulousCount_args args = new GetColumnFabulousCount_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        GetColumnFabulousCount_result result = new GetColumnFabulousCount_result();
        try
        {
          result.Success = iface_.GetColumnFabulousCount(args.MemberName);
          oprot.WriteMessageBegin(new TMessage("GetColumnFabulousCount", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("GetColumnFabulousCount", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void GetCommentFabulousCount_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        GetCommentFabulousCount_args args = new GetCommentFabulousCount_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        GetCommentFabulousCount_result result = new GetCommentFabulousCount_result();
        try
        {
          result.Success = iface_.GetCommentFabulousCount(args.MemberName);
          oprot.WriteMessageBegin(new TMessage("GetCommentFabulousCount", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("GetCommentFabulousCount", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void GetFollowMeCount_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        GetFollowMeCount_args args = new GetFollowMeCount_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        GetFollowMeCount_result result = new GetFollowMeCount_result();
        try
        {
          result.Success = iface_.GetFollowMeCount(args.MemberName);
          oprot.WriteMessageBegin(new TMessage("GetFollowMeCount", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("GetFollowMeCount", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void GetFollowCount_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        GetFollowCount_args args = new GetFollowCount_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        GetFollowCount_result result = new GetFollowCount_result();
        try
        {
          result.Success = iface_.GetFollowCount(args.MemberName);
          oprot.WriteMessageBegin(new TMessage("GetFollowCount", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("GetFollowCount", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void GetFabulousCount_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        GetFabulousCount_args args = new GetFabulousCount_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        GetFabulousCount_result result = new GetFabulousCount_result();
        try
        {
          result.Success = iface_.GetFabulousCount(args.MemberName);
          oprot.WriteMessageBegin(new TMessage("GetFabulousCount", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("GetFabulousCount", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void GetCommentList_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        GetCommentList_args args = new GetCommentList_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        GetCommentList_result result = new GetCommentList_result();
        try
        {
          result.Success = iface_.GetCommentList(args.MemberName, args.RelationID, args.CommentType);
          oprot.WriteMessageBegin(new TMessage("GetCommentList", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("GetCommentList", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetMyFollowMember_args : TBase
    {
      private string _memberName;

      public string MemberName
      {
        get
        {
          return _memberName;
        }
        set
        {
          __isset.memberName = true;
          this._memberName = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool memberName;
      }

      public GetMyFollowMember_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  MemberName = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("GetMyFollowMember_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (MemberName != null && __isset.memberName) {
            field.Name = "memberName";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(MemberName);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("GetMyFollowMember_args(");
        bool __first = true;
        if (MemberName != null && __isset.memberName) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("MemberName: ");
          __sb.Append(MemberName);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetMyFollowMember_result : TBase
    {
      private List<FollowMember> _success;

      public List<FollowMember> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public GetMyFollowMember_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.List) {
                  {
                    Success = new List<FollowMember>();
                    TList _list4 = iprot.ReadListBegin();
                    for( int _i5 = 0; _i5 < _list4.Count; ++_i5)
                    {
                      FollowMember _elem6;
                      _elem6 = new FollowMember();
                      _elem6.Read(iprot);
                      Success.Add(_elem6);
                    }
                    iprot.ReadListEnd();
                  }
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("GetMyFollowMember_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.List;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              {
                oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
                foreach (FollowMember _iter7 in Success)
                {
                  _iter7.Write(oprot);
                }
                oprot.WriteListEnd();
              }
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("GetMyFollowMember_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class IsFollowing_args : TBase
    {
      private string _memberName;
      private string _myID;

      public string MemberName
      {
        get
        {
          return _memberName;
        }
        set
        {
          __isset.memberName = true;
          this._memberName = value;
        }
      }

      public string MyID
      {
        get
        {
          return _myID;
        }
        set
        {
          __isset.myID = true;
          this._myID = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool memberName;
        public bool myID;
      }

      public IsFollowing_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  MemberName = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.String) {
                  MyID = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("IsFollowing_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (MemberName != null && __isset.memberName) {
            field.Name = "memberName";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(MemberName);
            oprot.WriteFieldEnd();
          }
          if (MyID != null && __isset.myID) {
            field.Name = "myID";
            field.Type = TType.String;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(MyID);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("IsFollowing_args(");
        bool __first = true;
        if (MemberName != null && __isset.memberName) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("MemberName: ");
          __sb.Append(MemberName);
        }
        if (MyID != null && __isset.myID) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("MyID: ");
          __sb.Append(MyID);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class IsFollowing_result : TBase
    {
      private bool _success;

      public bool Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public IsFollowing_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Bool) {
                  Success = iprot.ReadBool();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("IsFollowing_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            field.Name = "Success";
            field.Type = TType.Bool;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteBool(Success);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("IsFollowing_result(");
        bool __first = true;
        if (__isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetAllFollowMember_args : TBase
    {
      private string _memberName;

      public string MemberName
      {
        get
        {
          return _memberName;
        }
        set
        {
          __isset.memberName = true;
          this._memberName = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool memberName;
      }

      public GetAllFollowMember_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  MemberName = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("GetAllFollowMember_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (MemberName != null && __isset.memberName) {
            field.Name = "memberName";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(MemberName);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("GetAllFollowMember_args(");
        bool __first = true;
        if (MemberName != null && __isset.memberName) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("MemberName: ");
          __sb.Append(MemberName);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetAllFollowMember_result : TBase
    {
      private List<string> _success;

      public List<string> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public GetAllFollowMember_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.List) {
                  {
                    Success = new List<string>();
                    TList _list8 = iprot.ReadListBegin();
                    for( int _i9 = 0; _i9 < _list8.Count; ++_i9)
                    {
                      string _elem10;
                      _elem10 = iprot.ReadString();
                      Success.Add(_elem10);
                    }
                    iprot.ReadListEnd();
                  }
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("GetAllFollowMember_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.List;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              {
                oprot.WriteListBegin(new TList(TType.String, Success.Count));
                foreach (string _iter11 in Success)
                {
                  oprot.WriteString(_iter11);
                }
                oprot.WriteListEnd();
              }
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("GetAllFollowMember_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class DeleteCollection_args : TBase
    {
      private string _memberName;
      private string _userName;
      private int _collectionID;

      public string MemberName
      {
        get
        {
          return _memberName;
        }
        set
        {
          __isset.memberName = true;
          this._memberName = value;
        }
      }

      public string UserName
      {
        get
        {
          return _userName;
        }
        set
        {
          __isset.userName = true;
          this._userName = value;
        }
      }

      public int CollectionID
      {
        get
        {
          return _collectionID;
        }
        set
        {
          __isset.collectionID = true;
          this._collectionID = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool memberName;
        public bool userName;
        public bool collectionID;
      }

      public DeleteCollection_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  MemberName = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.String) {
                  UserName = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 3:
                if (field.Type == TType.I32) {
                  CollectionID = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("DeleteCollection_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (MemberName != null && __isset.memberName) {
            field.Name = "memberName";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(MemberName);
            oprot.WriteFieldEnd();
          }
          if (UserName != null && __isset.userName) {
            field.Name = "userName";
            field.Type = TType.String;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(UserName);
            oprot.WriteFieldEnd();
          }
          if (__isset.collectionID) {
            field.Name = "collectionID";
            field.Type = TType.I32;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(CollectionID);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("DeleteCollection_args(");
        bool __first = true;
        if (MemberName != null && __isset.memberName) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("MemberName: ");
          __sb.Append(MemberName);
        }
        if (UserName != null && __isset.userName) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("UserName: ");
          __sb.Append(UserName);
        }
        if (__isset.collectionID) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("CollectionID: ");
          __sb.Append(CollectionID);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class DeleteCollection_result : TBase
    {
      private bool _success;

      public bool Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public DeleteCollection_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Bool) {
                  Success = iprot.ReadBool();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("DeleteCollection_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            field.Name = "Success";
            field.Type = TType.Bool;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteBool(Success);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("DeleteCollection_result(");
        bool __first = true;
        if (__isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetPostFabulousCount_args : TBase
    {
      private string _memberName;

      public string MemberName
      {
        get
        {
          return _memberName;
        }
        set
        {
          __isset.memberName = true;
          this._memberName = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool memberName;
      }

      public GetPostFabulousCount_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  MemberName = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("GetPostFabulousCount_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (MemberName != null && __isset.memberName) {
            field.Name = "memberName";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(MemberName);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("GetPostFabulousCount_args(");
        bool __first = true;
        if (MemberName != null && __isset.memberName) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("MemberName: ");
          __sb.Append(MemberName);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetPostFabulousCount_result : TBase
    {
      private int _success;

      public int Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public GetPostFabulousCount_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.I32) {
                  Success = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("GetPostFabulousCount_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            field.Name = "Success";
            field.Type = TType.I32;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(Success);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("GetPostFabulousCount_result(");
        bool __first = true;
        if (__isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetColumnFabulousCount_args : TBase
    {
      private string _memberName;

      public string MemberName
      {
        get
        {
          return _memberName;
        }
        set
        {
          __isset.memberName = true;
          this._memberName = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool memberName;
      }

      public GetColumnFabulousCount_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  MemberName = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("GetColumnFabulousCount_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (MemberName != null && __isset.memberName) {
            field.Name = "memberName";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(MemberName);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("GetColumnFabulousCount_args(");
        bool __first = true;
        if (MemberName != null && __isset.memberName) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("MemberName: ");
          __sb.Append(MemberName);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetColumnFabulousCount_result : TBase
    {
      private int _success;

      public int Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public GetColumnFabulousCount_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.I32) {
                  Success = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("GetColumnFabulousCount_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            field.Name = "Success";
            field.Type = TType.I32;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(Success);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("GetColumnFabulousCount_result(");
        bool __first = true;
        if (__isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetCommentFabulousCount_args : TBase
    {
      private string _memberName;

      public string MemberName
      {
        get
        {
          return _memberName;
        }
        set
        {
          __isset.memberName = true;
          this._memberName = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool memberName;
      }

      public GetCommentFabulousCount_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  MemberName = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("GetCommentFabulousCount_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (MemberName != null && __isset.memberName) {
            field.Name = "memberName";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(MemberName);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("GetCommentFabulousCount_args(");
        bool __first = true;
        if (MemberName != null && __isset.memberName) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("MemberName: ");
          __sb.Append(MemberName);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetCommentFabulousCount_result : TBase
    {
      private int _success;

      public int Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public GetCommentFabulousCount_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.I32) {
                  Success = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("GetCommentFabulousCount_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            field.Name = "Success";
            field.Type = TType.I32;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(Success);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("GetCommentFabulousCount_result(");
        bool __first = true;
        if (__isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetFollowMeCount_args : TBase
    {
      private string _memberName;

      public string MemberName
      {
        get
        {
          return _memberName;
        }
        set
        {
          __isset.memberName = true;
          this._memberName = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool memberName;
      }

      public GetFollowMeCount_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  MemberName = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("GetFollowMeCount_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (MemberName != null && __isset.memberName) {
            field.Name = "memberName";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(MemberName);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("GetFollowMeCount_args(");
        bool __first = true;
        if (MemberName != null && __isset.memberName) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("MemberName: ");
          __sb.Append(MemberName);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetFollowMeCount_result : TBase
    {
      private int _success;

      public int Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public GetFollowMeCount_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.I32) {
                  Success = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("GetFollowMeCount_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            field.Name = "Success";
            field.Type = TType.I32;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(Success);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("GetFollowMeCount_result(");
        bool __first = true;
        if (__isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetFollowCount_args : TBase
    {
      private string _memberName;

      public string MemberName
      {
        get
        {
          return _memberName;
        }
        set
        {
          __isset.memberName = true;
          this._memberName = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool memberName;
      }

      public GetFollowCount_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  MemberName = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("GetFollowCount_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (MemberName != null && __isset.memberName) {
            field.Name = "memberName";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(MemberName);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("GetFollowCount_args(");
        bool __first = true;
        if (MemberName != null && __isset.memberName) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("MemberName: ");
          __sb.Append(MemberName);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetFollowCount_result : TBase
    {
      private int _success;

      public int Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public GetFollowCount_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.I32) {
                  Success = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("GetFollowCount_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            field.Name = "Success";
            field.Type = TType.I32;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(Success);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("GetFollowCount_result(");
        bool __first = true;
        if (__isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetFabulousCount_args : TBase
    {
      private string _memberName;

      public string MemberName
      {
        get
        {
          return _memberName;
        }
        set
        {
          __isset.memberName = true;
          this._memberName = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool memberName;
      }

      public GetFabulousCount_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  MemberName = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("GetFabulousCount_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (MemberName != null && __isset.memberName) {
            field.Name = "memberName";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(MemberName);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("GetFabulousCount_args(");
        bool __first = true;
        if (MemberName != null && __isset.memberName) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("MemberName: ");
          __sb.Append(MemberName);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetFabulousCount_result : TBase
    {
      private int _success;

      public int Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public GetFabulousCount_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.I32) {
                  Success = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("GetFabulousCount_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            field.Name = "Success";
            field.Type = TType.I32;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(Success);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("GetFabulousCount_result(");
        bool __first = true;
        if (__isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetCommentList_args : TBase
    {
      private string _memberName;
      private int _RelationID;
      private int _CommentType;

      public string MemberName
      {
        get
        {
          return _memberName;
        }
        set
        {
          __isset.memberName = true;
          this._memberName = value;
        }
      }

      public int RelationID
      {
        get
        {
          return _RelationID;
        }
        set
        {
          __isset.RelationID = true;
          this._RelationID = value;
        }
      }

      public int CommentType
      {
        get
        {
          return _CommentType;
        }
        set
        {
          __isset.CommentType = true;
          this._CommentType = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool memberName;
        public bool RelationID;
        public bool CommentType;
      }

      public GetCommentList_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  MemberName = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.I32) {
                  RelationID = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 3:
                if (field.Type == TType.I32) {
                  CommentType = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("GetCommentList_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (MemberName != null && __isset.memberName) {
            field.Name = "memberName";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(MemberName);
            oprot.WriteFieldEnd();
          }
          if (__isset.RelationID) {
            field.Name = "RelationID";
            field.Type = TType.I32;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(RelationID);
            oprot.WriteFieldEnd();
          }
          if (__isset.CommentType) {
            field.Name = "CommentType";
            field.Type = TType.I32;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(CommentType);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("GetCommentList_args(");
        bool __first = true;
        if (MemberName != null && __isset.memberName) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("MemberName: ");
          __sb.Append(MemberName);
        }
        if (__isset.RelationID) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("RelationID: ");
          __sb.Append(RelationID);
        }
        if (__isset.CommentType) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("CommentType: ");
          __sb.Append(CommentType);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetCommentList_result : TBase
    {
      private List<CommentResult> _success;

      public List<CommentResult> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public GetCommentList_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.List) {
                  {
                    Success = new List<CommentResult>();
                    TList _list12 = iprot.ReadListBegin();
                    for( int _i13 = 0; _i13 < _list12.Count; ++_i13)
                    {
                      CommentResult _elem14;
                      _elem14 = new CommentResult();
                      _elem14.Read(iprot);
                      Success.Add(_elem14);
                    }
                    iprot.ReadListEnd();
                  }
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("GetCommentList_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.List;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              {
                oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
                foreach (CommentResult _iter15 in Success)
                {
                  _iter15.Write(oprot);
                }
                oprot.WriteListEnd();
              }
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("GetCommentList_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }

  }
}
